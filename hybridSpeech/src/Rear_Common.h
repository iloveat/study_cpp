
#ifndef	_EMTTS__REAR_COMMON__H_
#define _EMTTS__REAR_COMMON__H_


#include "emCommon.h"
#include "List_Rear_Lab.hxx"

#ifdef __cplusplus
extern "C" {
#endif



//  内存管理：
#if SEG_ADD_PAU_TEN_STAGE_TEN_FRAME
	#define SEG_TEMP_PAU_STATE_FRAME		1			//分段合成：前后加的pau的每个状态为1帧 fhy 121225		
#if EM_ENG_AS_SEN_SYNTH
	#define MAX_FRAME_COUNT_OF_SEG			(3000)		//2000帧10秒
#else	
	#define MAX_FRAME_COUNT_OF_SEG			(MAX_FRAME_COUNT_OF_SYL*MAX_SYNTH_LAB_COUNT+2*SEG_TEMP_PAU_STATE_FRAME*NSTATE_CN)		//分段合成的每次输出的最大帧数(大约470帧)
#endif
#else
	#define SEG_TEMP_PREV_PAU_TOTAL_FRAME	6		//分段合成：前加的pau的总帧数都为4	
	#define SEG_TEMP_NEXT_PAU_TOTAL_FRAME	4		//分段合成：后加的pau的总帧数都为6
	#define MAX_FRAME_COUNT_OF_SEG			(MAX_FRAME_COUNT_OF_SYL*MAX_SYNTH_LAB_COUNT+SEG_TEMP_PREV_PAU_TOTAL_FRAME+SEG_TEMP_NEXT_PAU_TOTAL_FRAME)		//分段合成的每次输出的最大帧数
#endif




#define VOICED							1		// 清浊音标志
#define UNVOICED						0

/* check variance in finv() */
#define INFTY							((double) 1.0e+38)
#define INFTY2  						((double) 1.0e+19)
#define INVINF  						((double) 1.0e-38)
#define INVINF2 						((double) 1.0e-19)

#define PAU_INITIAL_NO					2
#define SIL_INITIAL_NO					1



#define NUMBER_INITIAL					24
#define NUMBER_FINAL					59
#define NUMBER_TONE						5


#define FSEEK_START                     0
#define FSEEK_CUR                       1
#define FSEEK_END                       2

/*  -------------------------- vocoder ----------------------------  */

#ifndef PI
#define PI								(3.14159265358979323846)
#endif                          
#ifndef PI2
#define	PI2								(6.28318530717958647692)
#endif                        

#define	ZERO							(1.0e-10 )          /* ~(0) */
#define	LZERO							(-1.0e+10)        /* ~log(0) */

#define RANDMAX							32767
#define RANDMAX_RECIPROCAL				(2.0/32767.0)

#define IPERIOD							1
#define SEED    						1
#define B0      						0x00000001
#define B28    							0x10000000
#define B31    							0x80000000
#define B31_   							0x7fffffff
#define Z       						0x00000000

#define GAUSS     						TRUE
#define PADEORDER 						4
#define IRLENG    						16

/* for MGLSA filter */
#define NORMFLG1 						TRUE
#define NORMFLG2 						FALSE
#define MULGFLG1 						TRUE
#define MULGFLG2 						FALSE
#define NGAIN    						FALSE

#if REAR_LSP_POSTFILTER
	/* added by wcm 2011-09-05 */
	/* for postfilter */  
	#define LPC_ORD        18    // lpc order
	#define TILT_ORD        1    // tilt filter order
	#define POST_NUM_BETA  0.4   //[0,1]  use for all zeros filter ,beta ,numerator  ,0.4 default
	#define POST_DEN_ALPHA 0.8   //[0,1]  use for all poles filter ,alpha , denominator , 0.8 default
	#define TILT_COFF      0.0   //[0,1]  use for tilt compensation filter
	#define BEGIN          20    //for buff 
	#define RELETIVE_ENERGY 0.3
#endif



	////////////////////////  韵律短语尾基频DCT模板说明（不含单双句）  //////////////////////////////////
	//
	//	行的索引 = 本调：*20 + 位置类型：*10  + 	声母类型*5  + 影响的前后调：

	//	本调：5种 ；  位置类型：2种 ； 声母类型：2种 ； 前调：5种；

	//	位置类型：取值范围：    0： 句尾			1： 纯韵律短语尾（不包含句尾）		2：其它		
	//	声母类型：取值范围：	0： 其它声母		1： 零浊声母	

	//	影响的前后调：取值范围： （若是：两字PPH的韵首，则影响的是后调；   若是：两字PPH的韵尾，则影响的是前调；）
	//		0:表示轻声调；	1:表示1调；	2:表示2调；	3:表示3调；	4:表示4调

	//	注意：《本调：取值范围》与《影响的前后调：取值范围》相同
	//
	////////////////////////  韵律短语尾基频DCT模板说明（不含单双句） //////////////////////////////////
	//hyl 2012-10-16 为优化栈空间移到此处
	emStatic emConst float fTwoDctValuePphTail[100][7]={										//序号 本调 位置 声母 影响音调 出现该音节个数
   {0.411257,0.022385,0.014214,0.008795,-0.001293,0.005316,0.000474},		//1,0,0,0,0,12,
   {0.438512,0.060693,0.032576,0.016381,0.005028,0.00702,0.001047},			//2,0,0,0,1,69,
   {0.544838,0.055943,0.014627,0.004585,-0.001676,0.003287,-0.001186},		//3,0,0,0,2,56,
   {0.450014,0.00403,0.005495,0.006053,-0.000494,0.003301,0.000435},		//4,0,0,0,3,38,
   {0.388303,0.025777,0.02012,0.007714,0.00004,0.004956,0.000336},			//5,0,0,0,4,81,
   {0.423694,0.020313,0.015427,-0.001411,-0.002616,0.003384,-0.000855},		//6,0,0,1,0,18,
   {0.591966,0.135319,0.022589,-0.010911,-0.005805,0.002491,-0.001493},		//7,0,0,1,1,63,
   {0.521334,-0.001281,-0.021006,-0.008504,-0.00414,0.000742,-0.002075},    //8,0,0,1,2,69,
   {0.431299,-0.03542,-0.006615,-0.006022,-0.004273,0.001848,-0.00192},		//9,0,0,1,3,65,
   {0.410942,0.026073,0.014719,-0.002126,-0.001216,0.004366,-0.001464},		//10,0,0,1,4,87,
   {0.487582,0.035059,0.009035,0.00776,0.00149,0.004393,0.001035},			//11,0,1,0,0,41,
   {0.530166,0.087673,0.029398,0.01491,0.005788,0.005783,0.001087},			//12,0,1,0,1,242,
   {0.621194,0.056399,0.005523,0.003933,-0.001633,0.002864,-0.00178},		//13,0,1,0,2,229,
   {0.521309,0.003775,0.00091,0.00548,-0.000664,0.004411,-0.000811},		//14,0,1,0,3,178,
   {0.449045,0.037886,0.011238,0.008602,0.001992,0.00408,0.000098},			//15,0,1,0,4,374,
   {0.589455,0.037514,0.016357,-0.003107,-0.000651,0.001902,-0.000875},		//16,0,1,1,0,21,
   {0.685114,0.121241,0.018113,-0.009883,-0.00468,0.000382,-0.000425},		//17,0,1,1,1,82,
   {0.628968,0.016988,-0.030439,-0.014404,-0.005359,-0.000383,-0.003367},   //18,0,1,1,2,90,
   {0.493651,-0.029105,-0.009085,-0.004296,-0.005112,0.001869,-0.003318},   //19,0,1,1,3,53,
   {0.469871,0.046867,0.007676,0.001674,-0.001539,0.003361,-0.000411},		//20,0,1,1,4,91,
   {0.737141,-0.009938,0.010847,0.002622,-0.000947,0.003221,-0.001171},		//21,1,0,0,0,41,
   {0.820123,0.001855,0.013484,0.005060,0.001556,0.001821,-0.000240},		//22,1,0,0,1,244,
   {0.837845,-0.011759,0.007499,0.002846,0.000205,0.000979,-0.000158},		//23,1,0,0,2,150,
   {0.74889,-0.01965,0.005583,0.00247,-0.000468,0.001502,-0.000746},		//24,1,0,0,3,149,
   {0.751697,-0.00893,0.009977,0.00168,0.000904,0.002108,-0.000409},		//25,1,0,0,4,249,
   {0.795268,-0.007689,-0.004736,-0.008475,-0.005455,-0.000913,-0.001436},	//26,1,0,1,0,1,			//特殊替换的
   {0.795268,-0.007689,-0.004736,-0.008475,-0.005455,-0.000913,-0.001436},  //27,1,0,1,1,27,
   {0.786643,-0.045529,-0.00833,-0.015068,-0.006833,-0.003823,-0.003609},   //28,1,0,1,2,15,
   {0.757727,-0.07345,-0.024856,-0.014703,-0.008463,-0.00479,-0.00188},		//29,1,0,1,3,17,
   {0.7891,-0.051824,-0.017654,-0.015101,-0.006942,-0.003752,-0.002109},    //30,1,0,1,4,22,
   {0.819264,-0.011047,0.008086,0.002707,0.000759,0.002436,0.000179},		//31,1,1,0,0,76,
   {0.939325,0.005182,0.007624,0.00439,-0.000047,0.001094,-0.000819},		//32,1,1,0,1,499,
   {0.926463,-0.004423,0.00379,0.002397,-0.001425,0.000074,-0.000947},		//33,1,1,0,2,373,
   {0.836157,-0.018671,0.001635,0.002882,-0.000644,0.001146,-0.000172},		//34,1,1,0,3,347,
   {0.897883,-0.006062,0.005547,0.002976,-0.000859,0.000832,-0.001035},		//35,1,1,0,4,528,
   {0.963677,-0.019471,-0.007502,-0.005976,-0.007005,-0.000674,-0.002507},	//36,1,1,1,0,2,			//特殊替换的
   {0.963677,-0.019471,-0.007502,-0.005976,-0.007005,-0.000674,-0.002507},  //37,1,1,1,1,58,
   {0.921725,-0.048864,-0.020775,-0.012111,-0.011027,-0.002527,-0.003849},  //38,1,1,1,2,30,
   {0.837805,-0.065348,-0.019965,-0.008627,-0.009827,-0.000667,-0.003159},  //39,1,1,1,3,17,
   {0.887081,-0.041475,-0.020615,-0.012756,-0.010488,-0.002873,-0.003405},  //40,1,1,1,4,34,
   {0.487753,-0.037705,0.039622,0.009763,0.005371,0.008795,0.000266},		//41,2,0,0,0,17,
   {0.449262,0.019532,0.032964,0.015635,0.007673,0.005915,0.000109},		//42,2,0,0,1,141,
   {0.478226,0.012302,0.031949,0.010565,0.00609,0.005504,-0.000136},		//43,2,0,0,2,137,
   {0.473827,-0.023479,0.031964,0.00493,0.005806,0.005827,0.000333},		//44,2,0,0,3,96,
   {0.459524,-0.005294,0.031189,0.009109,0.007458,0.006019,0.000433},		//45,2,0,0,4,184,
   {0.454836,-0.010063,0.02741,-0.008316,-0.003131,0.001293,-0.004798},		//46,2,0,1,0,11,
   {0.576883,0.080555,0.073196,0.015032,0.003027,-0.000279,-0.001102},		//47,2,0,1,1,107,
   {0.537833,0.043273,0.039504,-0.008481,-0.004368,-0.005447,-0.003873},    //48,2,0,1,2,99,


   {0.488227,-0.02586,0.029922,-0.010324,0.000616,-0.000788,-0.002915},		//49,2,0,1,3,78,
   {0.448643,0.011353,0.034601,-0.000963,0.00248,-0.000521,-0.000747},		//50,2,0,1,4,106,
   {0.522434,-0.019564,0.033773,0.009309,0.006001,0.005219,-0.00002},		//51,2,1,0,0,29,
   {0.52173,0.016093,0.034686,0.015408,0.006937,0.006741,0.000326},			//52,2,1,0,1,266,
   {0.558837,0.000869,0.033606,0.013479,0.005827,0.006991,0.000571},		//53,2,1,0,2,247,
   {0.527898,-0.024939,0.028601,0.007107,0.003413,0.005926,-0.000214},		//54,2,1,0,3,210,
   {0.509647,0.000295,0.02878,0.012643,0.004345,0.006184,0.000074},			//55,2,1,0,4,325,
   {0.518745,-0.006793,0.034144,-0.009073,-0.00019,-0.000234,-0.002204},    //56,2,1,1,0,22,
   {0.658374,0.074405,0.064862,0.009268,0.000211,0.000348,-0.002043},		//57,2,1,1,1,215,
   {0.62011,0.036158,0.047816,-0.000899,-0.005544,-0.00258,-0.003962},		//58,2,1,1,2,184,
   {0.488961,-0.026248,0.027266,-0.008265,-0.000696,0.000322,-0.003015},    //59,2,1,1,3,144,
   {0.548057,0.010417,0.038537,-0.000965,0.000023,0.000449,-0.001635},		//60,2,1,1,4,222,
   {0.395823,0.073481,0.032315,0.017343,0.005731,0.006165,0.001040},		//61,3,0,0,0,21,
   {0.466540,0.081610,0.035463,0.014873,0.008766,0.005934,0.002175},		//62,3,0,0,1,202,
   {0.477225,0.091133,0.031425,0.01467,0.007337,0.004131,0.002237},			//63,3,0,0,2,327,
   {0.427225,0.091133,0.031425,0.01467,0.007337,0.004131,0.002237},			//64,3,0,0,3,0,			//特殊替换的
   {0.489331,0.055013,0.025761,0.009648,0.005551,0.004612,0.001375},		//65,3,0,0,4,275,
   {0.443214,0.098591,0.013204,-0.007523,0.000498,0.003666,-0.003736},		//66,3,0,1,0,8,
   {0.586035,0.183237,0.036671,0.003843,-0.003148,0.001357,0.000946},		//67,3,0,1,1,55,
   {0.557684,0.135349,-0.005759,-0.014642,-0.009418,-0.003585,-0.001607},   //68,3,0,1,2,111,
   {0.41687,0.075374,0.012849,0.000966,0.001815,0.001474,0.000428},			//69,3,0,1,3,0,			//特殊替换的										
   {0.41687,0.075374,0.012849,0.000966,0.001815,0.001474,0.000428},			//70,3,0,1,4,85,
   {0.455585,0.07589,0.025353,0.017308,0.005562,0.005116,0.001591},			//71,3,1,0,0,50,
   {0.470731,0.088605,0.031259,0.019251,0.006372,0.005361,0.001122},		//72,3,1,0,1,350,
   {0.490974,0.097734,0.027979,0.018662,0.00492,0.005666,0.000917},			//73,3,1,0,2,607,
   {0.490974,0.097734,0.027979,0.018662,0.00492,0.005666,0.000917},			//74,3,1,0,3,0,			//特殊替换的
   {0.437239,0.062563,0.020206,0.014758,0.00332,0.004894,0.000677},			//75,3,1,0,4,495,
   {0.486982,0.083601,-0.001149,0.000546,-0.004598,0.002793,-0.000388},		//76,3,1,1,0,25,
   {0.629027,0.164425,0.023534,0.000126,-0.006726,0.000928,0.000038},		//77,3,1,1,1,92,
   {0.633785,0.136553,-0.003688,-0.015785,-0.01042,-0.000991,-0.002694},    //78,3,1,1,2,258,
   {0.478387,0.078398,0.011416,0.001832,-0.0009,0.001435,0.000283},		    //79,3,1,1,3,0,			//特殊替换的
   {0.478387,0.078398,0.011416,0.001832,-0.0009,0.001435,0.000283},			//80,3,1,1,4,162,
   {0.604991,0.102935,0.009700,-0.001887,0.001321,0.003440,-0.001160},		//81,4,0,0,0,22,
   {0.602109,0.131314,0.023620,0.003302,0.001611,0.002731,-0.000511},		//82,4,0,0,1,279,
   {0.598259,0.093145,0.006813,0.000406,-0.000419,0.00228,-0.001629},		//83,4,0,0,2,286,
   {0.577867,0.078491,0.000878,-0.001334,0.000604,0.001916,-0.00126},		//84,4,0,0,3,255,
   {0.645089,0.085448,0.011282,0.002006,0.001739,0.002552,-0.001137},		//85,4,0,0,4,348,
   {0.657403,0.0612,-0.065324,-0.007305,0.002538,-0.000352,0.000694},		//86,4,0,1,0,8,  原
   {0.695281,0.13395,-0.03451,-0.012068,-0.001697,0.000006,-0.001305},		//87,4,0,1,1,84,
   {0.621464,0.040889,-0.043523,-0.021182,-0.00298,-0.001778,-0.003556},    //88,4,0,1,2,112,
   {0.550433,0.023858,-0.049274,-0.014198,-0.003266,-0.001081,-0.002519},   //89,4,0,1,3,86,
   {0.536559,0.054824,-0.021798,-0.005614,-0.000878,0.000323,-0.000713},    //90,4,0,1,4,187,
   {0.647277,0.086646,0.010796,-0.000139,0.002698,0.002486,-0.0016},		//91,4,1,0,0,62,
   {0.684976,0.125101,0.022888,0.003237,0.001994,0.002034,-0.001124},		//92,4,1,0,1,538,
   {0.702251,0.091115,0.006617,0.001103,-0.000117,0.002321,-0.001622},		//93,4,1,0,2,564,
   {0.676081,0.074476,0.000122,-0.000345,-0.000548,0.001857,-0.001531},		//94,4,1,0,3,443,
   {0.641038,0.086953,0.009559,0.002772,0.002,0.002476,-0.001121},			//95,4,1,0,4,682,
   {0.672206,0.049869,-0.033816,-0.021312,-0.003137,-0.003204,-0.00208},    //96,4,1,1,0,18,
   {0.793749,0.13357,-0.028927,-0.016267,-0.000037,-0.000362,-0.000891},    //97,4,1,1,1,156,
   {0.715523,0.054281,-0.047833,-0.02181,-0.006058,-0.003716,-0.002665},    //98,4,1,1,2,185,
   {0.647719,0.025413,-0.052871,-0.018338,-0.004689,-0.003049,-0.002572},   //99,4,1,1,3,197,
   {0.662158,0.070991,-0.028121,-0.009999,-0.002998,0.000016,-0.001759}};   //100,4,1,1,4,296,


	////////////////////////  两字句：基频DCT模板说明  //////////////////////////////////
	//
	//	行的索引 = 本调：*20 + 位置类型：*10  + 	声母类型*5  + 影响的前后调：

	//	本调：5种 ；  位置类型：2种 ； 声母类型：2种 ； 影响的前后调：5种；

	//	位置类型：取值范围：    0： 两字PPH的韵首    1： 两字PPH的韵尾		
	//	声母类型：取值范围：		0： 其它声母		1： 零浊声母	

	//	影响的前后调：取值范围： （若是：两字PPH的韵首，则影响的是后调；   若是：两字PPH的韵尾，则影响的是前调；）
	//		0:表示轻声调；	1:表示1调；	2:表示2调；	3:表示3调；	4:表示4调

	//	注意：《本调：取值范围》与《影响的前后调：取值范围》相同
	//
	////////////////////////  两字句：基频DCT模板说明  //////////////////////////////////
    //hyl 2012-10-16 为优化栈空间移到此处
	emStatic emConst float fTwoDctValueShortSen[100][7]={													//序号 本调 位置 声母 影响音调 音节个数
	  {0, 0, 0, 0, 0, 0, 0},   														  // 1, 0, 0, 0, 0, 0,		//特殊替换  例子：的吧
	  {0, 0, 0, 0, 0, 0, 0},   														  // 2, 0, 0, 0, 1, 0,		//特殊替换  例子：的巴 
	  {0, 0, 0, 0, 0, 0, 0},   														  // 3, 0, 0, 0, 2, 0, 		//特殊替换  例子：的拔
	  {0, 0, 0, 0, 0, 0, 0},   														  // 4, 0, 0, 0, 3, 0,		//特殊替换  例子：的把
	  {0, 0, 0, 0, 0, 0, 0},   														  // 5, 0, 0, 0, 4, 0, 		//特殊替换  例子：的爸
	  {0, 0, 0, 0, 0, 0, 0},   														  // 6, 0, 0, 1, 0, 0,		//特殊替换  例子：[i1]me5吧
	  {0, 0, 0, 0, 0, 0, 0},   														  // 7, 0, 0, 1, 1, 0,		//特殊替换  例子：[i1]me5巴
	  {0, 0, 0, 0, 0, 0, 0},   														  // 8, 0, 0, 1, 2, 0,		//特殊替换  例子：[i1]me5拔
	  {0, 0, 0, 0, 0, 0, 0},   														  // 9, 0, 0, 1, 3, 0,		//特殊替换  例子：[i1]me5把 
	  {0, 0, 0, 0, 0, 0, 0},   														  // 10, 0, 0, 1, 4, 0,		//特殊替换  例子：[i1]me5爸
	  {0.447787, 0.052452, 0.005579, 0.00869, 0.000076, 0.00386, -0.001117},		  // 11, 0, 1, 0, 0, 0, 	//特殊替换  例子：[i1]de5ba5
	  {0.56526, 0.115853, 0.02484, 0.018682, 0.000652, 0.002585, 0.002468},           // 12, 0, 1, 0, 1, 11, 
	  {0.684833, 0.119417, -0.003004, -0.001151, -0.002616, 0.00169, -0.000359},      // 13, 0, 1, 0, 2, 6, 
	  {0.650026, -0.027116, -0.005981, 0.010042, -0.003897, 0.001302, 0.000145},      // 14, 0, 1, 0, 3, 8, 
	  {0.447787, 0.052452, 0.005579, 0.00869, 0.000076, 0.00386, -0.001117},          // 15, 0, 1, 0, 4, 10, 
	  {0.566789, 0.064441, 0.029302, 0.001306, 0.005448, 0.007079, -0.001394},		  // 16, 0, 1, 1, 0, 0, 	//特殊替换  例子：[i1]de5ma5
	  {0.750852, 0.160169, 0.028952, -0.009166, -0.006805, 0.003048, -0.001101},      // 17, 0, 1, 1, 1, 13, 
	  {0.876784, 0.054531, -0.056874, -0.016777, -0.01403, 0.003671, -0.003761},      // 18, 0, 1, 1, 2, 9, 
	  {0.650511, -0.058048, -0.009819, -0.006827, -0.003748, -0.00048, -0.002021},    // 19, 0, 1, 1, 3, 7, 
	  {0.566789, 0.064441, 0.029302, 0.001306, 0.005448, 0.007079, -0.001394},        // 20, 0, 1, 1, 4, 5, 
	  {1.112711, -0.011686, -0.00385, 0.004615, -0.007717, -0.000068, -0.003506},     // 21, 1, 0, 0, 0, 17, 
	  {0.993644, 0.002126, -0.006116, 0.006032, -0.005935, 0.001127, -0.002544},      // 22, 1, 0, 0, 1, 61, 
	  {1.083011, -0.003705, -0.00909, 0.008589, -0.006109, 0.003707, -0.002364},      // 23, 1, 0, 0, 2, 54, 
	  {1.065026, -0.01039, -0.003419, 0.007928, -0.005099, 0.002543, -0.002027},      // 24, 1, 0, 0, 3, 44, 
	  {1.062442, -0.007289, -0.005479, 0.004023, -0.006996, 0.000279, -0.003332},     // 25, 1, 0, 0, 4, 64, 
	  {1.138369, -0.061676, -0.018593, -0.008449, -0.013277, 0.000154, -0.004825},    // 26, 1, 0, 1, 0, 7, 
	  {0.971028, -0.031339, -0.022136, -0.009899, -0.012063, -0.002165, -0.002731},   // 27, 1, 0, 1, 1, 6, 
	  {1.055477, -0.05704, -0.026354, -0.012372, -0.015525, -0.001091, -0.007001},    // 28, 1, 0, 1, 2, 13, 
	  {0.939715, -0.040042, -0.017409, -0.007849, -0.015575, 0.000242, -0.008499},    // 29, 1, 0, 1, 3, 9, 
	  {1.039223, -0.039536, -0.018396, -0.009776, -0.014859, -0.002025, -0.008179},   // 30, 1, 0, 1, 4, 12, 
	  {0.952027, 0.000257, 0.000411, 0.003385, -0.003133, 0.000578, -0.001313},		  // 31, 1, 1, 0, 0, 0, 	//特殊替换  例子：的东
	  {0.989958, 0.005191, 0.004694, 0.004438, -0.001663, 0.00197, -0.001604},        // 32, 1, 1, 0, 1, 57, 
	  {1.008003, -0.007523, 0.001513, 0.002493, -0.003655, 0.000522, -0.002266},      // 33, 1, 1, 0, 2, 60, 
	  {0.962973, -0.024269, -0.003544, 0.001888, -0.003882, -0.000768, -0.000912},    // 34, 1, 1, 0, 3, 54, 
	  {0.952027, 0.000257, 0.000411, 0.003385, -0.003133, 0.000578, -0.001313},       // 35, 1, 1, 0, 4, 72, 
	  {0.933181, -0.044144, -0.035663, -0.001944, -0.010937, 0.002419, -0.001171},	  // 36, 1, 1, 1, 0, 0,		//特殊替换   例子：的猫
	  {1.02875, -0.01245, -0.008679, -0.004863, -0.006465, -0.0002, -0.000963},       // 37, 1, 1, 1, 1, 10, 
	  {1.027347, -0.020191, -0.023479, -0.001848, -0.017132, -0.000038, -0.005659},   // 38, 1, 1, 1, 2, 6, 
	  {0.855033, -0.081771, -0.036387, -0.01751, -0.014413, -0.00382, -0.00011},      // 39, 1, 1, 1, 3, 4, 
	  {0.933181, -0.044144, -0.035663, -0.001944, -0.010937, 0.002419, -0.001171},    // 40, 1, 1, 1, 4, 5, 
	  {0.648896, -0.050964, 0.016282, -0.011553, 0.004249, -0.00351, 0.001746},        // 41, 2, 0, 0, 0, 8,  //什么
	  {0.632925, -0.019247, 0.022993, 0.011726, 0.001397, 0.004314, 0.000666},        // 42, 2, 0, 0, 1, 41, 
	  {0.793783, -0.080894, 0.03349, 0.011237, 0.00017, 0.004304, -0.000527},         // 43, 2, 0, 0, 2, 36, 
	  {0.739721, -0.088632, 0.033691, 0.014493, 0.000103, 0.00496, 0.000457},         // 44, 2, 0, 0, 3, 73, 
	  {0.636054, -0.019753, 0.032294, 0.007301, 0.002693, 0.004707, 0.000527},        // 45, 2, 0, 0, 4, 53, 
	  {0.642899, -0.042392, 0.04252, -0.019615, -0.001558, -0.00729, -0.001914},      // 46, 2, 0, 1, 0, 7, 
	  {0.632646, -0.022952, 0.021814, -0.005731, -0.0037, 0.002018, -0.003009},       // 47, 2, 0, 1, 1, 25, 
	  {0.751786, -0.093058, 0.033437, 0.000211, -0.009459, -0.000399, -0.004376},     // 48, 2, 0, 1, 2, 23, 
	  {0.787935, -0.100373, 0.033988, -0.003686, -0.008941, 0.000324, -0.002907},     // 49, 2, 0, 1, 3, 21, 
	  {0.631858, -0.023119, 0.02774, -0.006242, -0.001273, 0.002378, -0.002672},      // 50, 2, 0, 1, 4, 36, 
	  {0.551538, -0.001172, 0.031701, 0.014778, 0.002851, 0.006708, -0.000981}, 	  // 51, 2, 1, 0, 0, 0, 	//特殊替换  例子：的狂
	  {0.577451, -0.00358, 0.032278, 0.016426, 0.005395, 0.009367, 0.000639},         // 52, 2, 1, 0, 1, 36, 
	  {0.612417, 0.004563, 0.032808, 0.013212, 0.002347, 0.007542, -0.001354},        // 53, 2, 1, 0, 2, 34, 
	  {0.626365, -0.043918, 0.038911, 0.008667, 0.001546, 0.006752, -0.000193},       // 54, 2, 1, 0, 3, 36, 
	  {0.551538, -0.001172, 0.031701, 0.014778, 0.002851, 0.006708, -0.000981},       // 55, 2, 1, 0, 4, 47, 
	  {0.58057, 0.007947, 0.037487, -0.000884, -0.001791, 0.002309, -0.001487},		  // 56, 2, 1, 1, 0, 0, 	//特殊替换  例子：的人
	  {0.697573, 0.054289, 0.065431, 0.017868, -0.001108, 0.003156, -0.00267},        // 57, 2, 1, 1, 1, 31, 
	  {0.745043, 0.041703, 0.047496, 0.001851, -0.004664, 0.000445, -0.004647},       // 58, 2, 1, 1, 2, 25, 
	  {0.616843, -0.061669, 0.037132, -0.009142, -0.005937, 0.001506, -0.004412},     // 59, 2, 1, 1, 3, 28, 
	  {0.58057, 0.007947, 0.037487, -0.000884, -0.001791, 0.002309, -0.001487},       // 60, 2, 1, 1, 4, 44, 
	  {0.481108, 0.07981, 0.031003, 0.009235, 0.007183, 0.001802, 0.00102},           // 61, 3, 0, 0, 0, 9, 
	  {0.536336, 0.052357, 0.031677, 0.004852, 0.005909, 0.004536, 0.001704},         // 62, 3, 0, 0, 1, 42, 
	  {0.633517, 0.055289, 0.022711, 0.008366, 0.003249, 0.004422, 0.001758},         // 63, 3, 0, 0, 2, 37, 
	  {0.589914, 0.054389, 0.030222, 0.004383, 0.004345, 0.00243, 0.000515},		  // 64, 3, 0, 0, 3, 0, 	//特殊替换  例子：[i1]dong3dong3
	  {0.589914, 0.054389, 0.030222, 0.004383, 0.004345, 0.00243, 0.000515},          // 65, 3, 0, 0, 4, 36, 
	  {0.567006, 0.076098, 0.003938, -0.009346, -0.002214, -0.003307, -0.002216},     // 66, 3, 0, 1, 0, 6, 
	  {0.534095, 0.05706, 0.005657, -0.010456, -0.001115, -0.002154, -0.000202},      // 67, 3, 0, 1, 1, 16, 
	  {0.620392, 0.03901, -0.009644, -0.003299, -0.004948, -0.001687, -0.002304},     // 68, 3, 0, 1, 2, 27, 
	  {0.566928, 0.051536, 0.010322, -0.017869, -0.003077, -0.004236, -0.001455},	  // 69, 3, 0, 1, 3, 0, 	//特殊替换  例子：[i1]mao3dong3
	  {0.566928, 0.051536, 0.010322, -0.017869, -0.003077, -0.004236, -0.001455},     // 70, 3, 0, 1, 4, 22, 
	  {0.477967, 0.07257, 0.021869, 0.012783, 0.001585, 0.003529, 0.000102},		  // 71, 3, 1, 0, 0, 0,		//特殊替换  例子：的款
	  {0.501314, 0.090548, 0.027138, 0.018886, 0.005242, 0.007005, 0.001277},         // 72, 3, 1, 0, 1, 40, 
	  {0.530257, 0.098415, 0.030368, 0.016732, 0.00396, 0.004957, 0.000701},          // 73, 3, 1, 0, 2, 66, 
	  {0.477967, 0.07257, 0.021869, 0.012783, 0.001585, 0.003529, 0.000102},  		  // 74, 3, 1, 0, 3, 0, 	//特殊替换  例子：[i1]dong3dong3
	  {0.477967, 0.07257, 0.021869, 0.012783, 0.001585, 0.003529, 0.000102},          // 75, 3, 1, 0, 4, 41, 
	  {0.526221, 0.083414, 0.010195, 0.005352, -0.005062, 0.003838, -0.000399},		  // 76, 3, 1, 1, 0, 0, 	//特殊替换  例子：[i1]de5mao3
	  {0.653728, 0.172375, 0.021045, 0.001379, -0.006647, 0.002332, -0.001881},       // 77, 3, 1, 1, 1, 13, 
	  {0.70194, 0.16584, -0.000559, -0.008254, -0.012723, 0.000501, -0.003495},       // 78, 3, 1, 1, 2, 28, 
	  {0.526221, 0.083414, 0.010195, 0.005352, -0.005062, 0.003838, -0.000399},		  // 79, 3, 1, 1, 3, 0, 	//特殊替换  例子：[i1]dong3mao3
	  {0.526221, 0.083414, 0.010195, 0.005352, -0.005062, 0.003838, -0.000399},       // 80, 3, 1, 1, 4, 15, 
	  {0.980433, 0.129793, -0.027445, 0.003862, -0.004878, 0.001862, -0.00412},       // 81, 4, 0, 0, 0, 8, 
	  {0.881608, 0.097053, 0.002688, -0.002547, -0.001329, 0.000402, -0.001176},      // 82, 4, 0, 0, 1, 54, 
	  {0.975804, 0.111697, -0.014065, -0.001453, -0.004818, 0.00099, -0.002612},      // 83, 4, 0, 0, 2, 58, 
	  {1.010704, 0.100877, -0.017197, -0.000201, -0.006012, -0.000316, -0.004145},    // 84, 4, 0, 0, 3, 43, 
	  {0.989092, 0.074162, -0.003516, 0.000555, -0.003617, 0.000191, -0.002372},      // 85, 4, 0, 0, 4, 61, 
	  {1.038415, 0.087624, -0.079718, -0.011074, -0.011113, -0.005734, -0.006963},    // 86, 4, 0, 1, 0, 7, 
	  {0.931069, 0.062264, -0.03696, -0.020941, -0.006379, -0.002501, -0.003319},     // 87, 4, 0, 1, 1, 23, 
	  {0.942969, 0.058834, -0.047411, -0.015338, -0.012991, -0.001028, -0.004538},    // 88, 4, 0, 1, 2, 33, 
	  {0.918227, 0.045962, -0.045429, -0.011709, -0.01175, -0.003964, -0.003235},     // 89, 4, 0, 1, 3, 13, 
	  {0.968555, 0.050521, -0.044235, -0.021571, -0.012099, -0.004555, -0.004188},    // 90, 4, 0, 1, 4, 33, 
	  {0.757784, 0.107679, -0.005812, 0.002292, 0.000716, 0.001105, -0.001047}, 	  // 91, 4, 1, 0, 0, 0, 	//特殊替换  例子：的矿
	  {0.788766, 0.152458, 0.007562, 0.002145, -0.00315, 0.000992, -0.003253},        // 92, 4, 1, 0, 1, 58, 
	  {0.738374, 0.124104, -0.007613, -0.00316, -0.001395, 0.000257, -0.002826},      // 93, 4, 1, 0, 2, 75, 
	  {0.827817, 0.088702, -0.018255, -0.005062, -0.006098, 0.001553, -0.00325},      // 94, 4, 1, 0, 3, 43, 
	  {0.757784, 0.107679, -0.005812, 0.002292, 0.000716, 0.001105, -0.001047},       // 95, 4, 1, 0, 4, 69, 
	  {0.799518, 0.083844, -0.05531, -0.002619, -0.006176, 0.000664, -0.000578},	  // 96, 4, 1, 1, 0, 0, 	//特殊替换  例子：[i1]de5mao4
	  {0.808682, 0.138891, -0.036025, -0.009649, -0.000349, 0.000688, -0.001224},     // 97, 4, 1, 1, 1, 18, 
	  {0.836711, 0.079306, -0.074086, -0.00593, -0.012242, -0.003481, -0.003514},     // 98, 4, 1, 1, 2, 14, 
	  {0.770735, 0.028919, -0.072446, -0.006857, -0.011365, -0.00257, -0.004693},     // 99, 4, 1, 1, 3, 15, 
	  {0.799518, 0.083844, -0.05531, -0.002619, -0.006176, 0.000664, -0.000578}};     // 100,4, 1, 1, 4, 25, 

	


struct tagRearRTGlobal //changed by naxy17
{
	//全局
	emByte		m_VADflag[MAX_FRAME_COUNT_OF_SEG];					//[帧数]*1：是否输出声音（0：输出声音； 1：不输出声音； 2：满足条件时输出声音）  hyl  2012-04-10
	float*		m_MgcLeafNode[MAX_SYNTH_ENG_LAB_COUNT+2][10];			//[音节数][10棵树]*2字节				0.5k	存储每个决策结果的均值码本索引
	emInt32		m_Lf0LeafNode[MAX_SYNTH_ENG_LAB_COUNT+2][10];			//[音节数][10棵树]*4字节				0.5k	存储每个决策结果在resource中的偏移
	emInt16		m_PhDuration[MAX_SYNTH_ENG_LAB_COUNT+2][10];			//[音节数][10状态]*2字节				0.24k	存储每个状态的时长
	emInt32		m_BapLeafNode[MAX_SYNTH_ENG_LAB_COUNT + 2][10];		//[音节数][10棵树]*4字节				bap
};
typedef struct tagRearRTGlobal TRearRTGlobal, emPtr PRearRTGlobal;

struct tagRearRTCalcFilter		//解算 滤波
{	
	float*		m_CmpFeature[MAX_FRAME_COUNT_OF_SEG];		//[帧数][19+1+1维]*4字节			组合特征,[0~18]谱,[19]基频 占用空间很大,增加一维的BAP	
};
typedef struct tagRearRTCalcFilter TRearRTCalcFilter, emPtr PRearRTCalcFilter;

struct tagRearRTCalc			//解算
{	
	float		m_ldl[MAX_FRAME_COUNT_OF_SEG][3];						//[帧数][3阶]*4字节						8.64k	存储WUW矩阵
	float		m_wum[MAX_FRAME_COUNT_OF_SEG];							//[帧数]*4字节							2.88k	存储WUM矩阵
	emByte		m_MSDflag[MAX_FRAME_COUNT_OF_SEG];						//[帧数]*1字节							0.72k	存储请浊音标志位
	float		m_FrameParam[3][7];										//[3状态][7参数]*4字节					0.08k	前一状态，当前状态和下一状态的参数

};
typedef struct tagRearRTCalc TRearRTCalc, emPtr PRearRTCalc;



emExtern float					g_gv[2];
emExtern float					*g_Matrix;								//changed by naxy17
emExtern PRearRTGlobal			g_pRearRTGlobal;						//后端全局时库
emExtern PRearRTCalcFilter		g_pRearRTCalcFilter;					//后端解算滤波时库
emExtern PRearRTCalc			g_pRearRTCalc;							//后端解算时库

emExtern float *g_lf0param;
emExtern float *g_bapparam;

emExtern emByte *g_AllTree;	
emExtern emInt32 g_AllTreeOffset[32];						//sqb    

emExtern PRearOffsetStr			g_pRearOffset;		//后端小资源偏移 fhy 121225
emExtern emBool	g_bRearSynChn;

// ********************  后端决策解算的公共函数 （定点与非定点） *************************************

#if WL_REAR_DEAL_DCT_SHORT_SEN			//王林音库后处理：中文韵律短语尾DCT模板（不含单双短句，不处理字母）
void ChangeShortSenZiGainF0(emInt32  nCurStartTime,emInt32  nSylTotalT,	emInt32  m1)	;
#endif

#if WL_REAR_DEAL_DCT_PPH_TAIL
void ChangePphTailDctF0(emInt32  nCurStartTime,emInt32  nSylTotalT,	emInt32  m1)	;	
#endif

#if WL_REAR_DEAL_DCT_LIGHT
void ChangeLightDctF0(emInt32  nCurStartTime,emInt32  nSylTotalT,	emInt32  m1)	;	
#endif

void	ModifyStateGain( emInt16 nLineCountOfPau ); // naxy 1219


emInt32  fread_float2(void * pDstBuf, emInt32 nElementSize,emInt32 nCount, FILE * pFile);

float	GetLeafNode(emInt16 nStartLineOfPau , emInt16 nLineCountOfPau, float remain);
float	ModifySpeed(emInt32 Offset,emInt16 pOffsetValue[10],float remain);

void	ModifyRGain(emInt16 nStartLineOfPau,  emInt16 nLineCountOfPau ); // naxy 1205

emInt16 Calc_wum (emInt16 m ,emInt16 length, emInt16 nStartLineOfPau, emInt16 nLineCountOfPau, float *wu);
emInt16	Calc_wuw_wum_msd(emInt16 m ,emInt16 length, emInt16 total_frame, emInt16 nStartLineOfPau, emInt16 nLineCountOfPau);
emInt16	Calc_wuw_wum_bap(emInt16 m, emInt16 length, emInt16 total_frame, emInt16 nStartLineOfPau, emInt16 nLineCountOfPau);
void	ModifyMSD(emInt16 nStartLineOfPau, emInt16 nLineCountOfPau);
void	LDL_facorication( emInt16 length, float *wuw );
void	LDL_facorication_msd( emInt16 length );
void	LDL_facorication_bap(emInt16 length);
void	Forward_substitution( emInt16 m, emInt16 length );
void	Backward_substitution( emInt16 m, emInt16 length );
void	GV_paramgen(emInt16 m, emInt16 length, float weight);
emInt16 AddUnvoiced(emInt16 m, emInt16 MSDlength, emInt16 total_length);

void	GetLf0Param(emInt16 nLineCountOfPau);
float	GetUVProp(emInt16 nStartLineOfPau, emInt16 n);

void	RearPrevHandle();		//后端预处理  设置虚拟发音人等

void	GetBapParam(emInt16 nLineCountOfPau);

// ********************  后端决策解算的公共函数 （定点与非定点） *************************************


#if	 EM_SYS_QING_ADD_ONE_STATUS

	//以下：为解决《清浊判别不好》等问题；人工强制

	//适用模型： （207-2模型）StrLsp（但基频用StrMgc，打开《强制某些拼音清音多1个状态》开关）
	#define ModifyOnePinYinMSD_Line_StrLsp_MgcLf0	118
	emStatic emConst emInt32 g_ModifyOnePinYinMSD_StrLsp_MgcLf0[ModifyOnePinYinMSD_Line_StrLsp_MgcLf0] = {
	705,  //za1
	706,  //za2
	707,  //za3
	708,  //za4
	709,  //za5
	809,  //chai1
	810,  //chai2
	811,  //chai3
	812,  //chai4
	813,  //chai5
	817,  //cai1
	818,  //cai2
	819,  //cai3
	820,  //cai4
	821,  //cai5
	865,  //kai1
	866,  //kai2
	867,  //kai3
	868,  //kai4
	869,  //kai5
	1065,  //chao1
	1066,  //chao2
	1067,  //chao3
	1068,  //chao4
	1069,  //chao5
	1073,  //cao1
	1074,  //cao2
	1075,  //cao3
	1076,  //cao4
	1077,  //cao5
	1121,  //kao1
	1122,  //kao2
	1123,  //kao3
	1124,  //kao4
	1125,  //kao5
	1330,  //can2
	1331,  //can3
	1332,  //can4
	1333,  //can5
	1585,  //cang1
	1586,  //cang2
	1587,  //cang3
	1588,  //cang4
	1589,  //cang5
	1705,  //tang1
	1706,  //tang2
	1707,  //tang3
	1708,  //tang4
	1709,  //tang5
	2089,  //chou1
	2090,  //chou2
	2091,  //chou3
	2092,  //chou4
	2093,  //chou5
	2345,  //che1
	2346,  //che2
	2347,  //che3
	2348,  //che4
	2349,  //che5
	2689,  //pei1
	2691,  //pei3
	2692,  //pei4
	2693,  //pei5
	2865,  //cen1
	2866,  //cen2
	2867,  //cen3
	2868,  //cen4
	2869,  //cen5
	3121,  //ceng1
	3122,  //ceng2
	3123,  //ceng3
	3124,  //ceng4
	3125,  //ceng5
	4745,  //qian1
	4746,  //qian2
	4747,  //qian3
	4748,  //qian4
	4749,  //qian5
	5977,  //jiong1
	5978,  //jiong2
	5979,  //jiong3
	5980,  //jiong4
	5981,  //jiong5
	6433,  //bu1
	6434,  //bu2
	6435,  //bu3
	6436,  //bu4
	6437,  //bu5
	6548,  //				ru4
	7321,  //shuai1
	8089,  //shun1
	8090,  //shun2
	8091,  //shun3
	8092,  //shun4
	8093,  //shun5
	8129,  //zun1
	8130,  //zun2
	8131,  //zun3
	8132,  //zun4
	8133,  //zun5
	8745,  //chong1
	8746,  //chong2
	8747,  //chong3
	8748,  //chong4
	8749,  //chong5
	8753,  //cong1
	8754,  //cong2
	8755,  //cong3
	8756,  //cong4
	8757,  //cong5
	9353,  //que1
	9355,  //que3
	9356,  //que4
	9357,  //que5
	10177,  //zi1
	10180,  //zi4
	10388,	//			ri4
	0		//垫底
	};

	//适用模型： （207-1模型）StrLsp
	#define ModifyOnePinYinMSD_Line_StrLsp		55
	emStatic emConst emInt32 g_ModifyOnePinYinMSD_StrLsp[ModifyOnePinYinMSD_Line_StrLsp] = {
	809,  //chai1
	810,  //chai2
	811,  //chai3
	812,  //chai4
	813,  //chai5
	865,  //kai1
	866,  //kai2
	867,  //kai3
	868,  //kai4
	869,  //kai5
	1073,  //cao1
	1074,  //cao2
	1075,  //cao3
	1076,  //cao4
	1077,  //cao5
	1121,  //kao1
	1122,  //kao2
	1123,  //kao3
	1124,  //kao4
	1125,  //kao5
	1330,  //can2
	1331,  //can3
	1332,  //can4
	1333,  //can5
	1585,  //cang1
	1586,  //cang2
	1587,  //cang3
	1588,  //cang4
	1589,  //cang5
	1705,  //tang1
	1706,  //tang2
	1707,  //tang3
	1708,  //tang4
	1709,  //tang5
	2689,  //pei1
	2690,  //pei2
	2691,  //pei3
	2692,  //pei4
	2693,  //pei5
	2865,  //cen1
	2866,  //cen2
	2867,  //cen3
	2868,  //cen4
	2869,  //cen5
	8089,  //shun1
	8090,  //shun2
	8091,  //shun3
	8092,  //shun4
	8093,  //shun5
	8129,  //zun1
	8130,  //zun2
	8131,  //zun3
	8132,  //zun4
	8133,  //zun5
	0	   //垫底
	};

	//适用模型： （205模型）  StrMgc
	#define ModifyOnePinYinMSD_Line_StrMgc		30
	emStatic emConst emInt32 g_ModifyOnePinYinMSD_StrMgc[ModifyOnePinYinMSD_Line_StrMgc] = {
	553,  //cha1
	554,  //cha2
	555,  //cha3
	556,  //cha4
	557,  //cha5
	809,  //chai1
	810,  //chai2
	811,  //chai3
	812,  //chai4
	813,  //chai5
	865,  //kai1
	866,  //kai2
	867,  //kai3
	868,  //kai4
	869,  //kai5
	1073,  //cao1
	1074,  //cao2
	1075,  //cao3
	1076,  //cao4
	1077,  //cao5
	1330,  //can2
	1331,  //can3
	1332,  //can4
	1333,  //can5
	1705,  //tang1
	1706,  //tang2
	1707,  //tang3
	1708,  //tang4
	1709,  //tang5
	0	   //垫底
	};

#endif		// EM_SYS_QING_ADD_ONE_STATUS


#ifdef __cplusplus
}
#endif


#endif	/* #define _EMTTS__REAR_COMMON__H_ */